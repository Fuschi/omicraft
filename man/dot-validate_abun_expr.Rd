% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-verbs-check-expressions.R
\name{.validate_abun_expr}
\alias{.validate_abun_expr}
\title{Validate a single expression for forbidden dplyr "current-group" calls with omic abundance variables}
\usage{
.validate_abun_expr(
  quo,
  forbidden_functions = c("n", "cur_group", "cur_group_id", "cur_group_rows",
    "cur_column"),
  disallowed_variables = c("abun", "rela", "norm"),
  expr_name = NULL
)
}
\arguments{
\item{quo}{A quosure from \code{rlang::enquos(...)} or a bare expression.}

\item{forbidden_functions}{Character vector of forbidden function names.}

\item{disallowed_variables}{Character vector of abundance-related variables.}

\item{expr_name}{Optional label for the expression (used in the error message).}
}
\value{
Invisibly returns \code{NULL}. Throws with \code{cli::cli_abort()} on violation.
}
\description{
This helper inspects one quosure (or bare expression). It throws an error
if it finds both:
\itemize{
\item a forbidden dplyr "current-group" function call (e.g., \code{n()}, \code{dplyr::n()})
\item and an abundance-related variable (\code{abun}, \code{rela}, \code{norm}) in the same expression.
}
}
\details{
The detection of forbidden functions is based on a regex that matches \emph{calls}
(i.e., requires an opening parenthesis), which prevents false positives when
a symbol is used as a variable (e.g., \code{n = ...}).
}
\keyword{internal}
