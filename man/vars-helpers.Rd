% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-base-methods.R
\name{vars-helpers}
\alias{vars-helpers}
\alias{meta_vars}
\alias{taxa_vars}
\alias{meta_taxa_vars}
\alias{link_vars}
\alias{omic_vars}
\alias{meta_vars,omic-method}
\alias{meta_vars,omics-method}
\alias{taxa_vars,omic-method}
\alias{taxa_vars,omics-method}
\alias{meta_taxa_vars,omic-method}
\alias{meta_taxa_vars,omics-method}
\alias{link_vars,omic-method}
\alias{link_vars,omics-method}
\alias{omic_vars,omic-method}
\alias{omic_vars,omics-method}
\title{Variable-name helpers for \code{omic} / \code{omics}}
\usage{
meta_vars(object, .fmt = "list")

\S4method{meta_vars}{omic}(object, .fmt = "list")

\S4method{meta_vars}{omics}(object, .fmt = "list")

taxa_vars(object, .fmt = "list")

\S4method{taxa_vars}{omic}(object, .fmt = "list")

\S4method{taxa_vars}{omics}(object, .fmt = "list")

meta_taxa_vars(object, .fmt = "list")

\S4method{meta_taxa_vars}{omic}(object, .fmt = "list")

\S4method{meta_taxa_vars}{omics}(object, .fmt = "list")

link_vars(object, .fmt = "list")

\S4method{link_vars}{omic}(object, .fmt = "list")

\S4method{link_vars}{omics}(object, .fmt = "list")

omic_vars(object, .fmt = "list")

\S4method{omic_vars}{omic}(object, .fmt = "list")

\S4method{omic_vars}{omics}(object, .fmt = "list")
}
\arguments{
\item{object}{An \code{omic} or \code{omics} object.}

\item{.fmt}{For \code{omics} only: one of \code{"list"} or \code{"unique"}.}
}
\value{
\itemize{
\item For \code{omic}: a character vector (possibly empty).
\item For \code{omics}: named list of character vectors (\code{.fmt = "list"}) or a unique character vector (\code{.fmt = "unique"}).
}
}
\description{
Helpers to retrieve semantic variable names from an \code{omic} or an \code{omics}
collection:
\itemize{
\item \code{meta_vars()}: sample-level variables. Returns \code{"sample_id"} when samples exist but \code{meta} is empty.
\item \code{taxa_vars()}: taxa-level variables. Always includes \code{"taxa_id"} when taxa exist; adds \code{"comm_id"} if communities are present.
\item \code{meta_taxa_vars()}: union of \code{meta_vars()} and \code{taxa_vars()}.
\item \code{link_vars()}: edge-level variables from the network; returns \code{"link_id"} if a network exists but no edge attributes.
\item \code{omic_vars()}: union of \code{meta_vars()}, \code{taxa_vars()}, and \code{link_vars()}.
}
}
\section{Output format for \code{omics}}{

The \code{.fmt} argument controls the output when \code{object} is an \code{omics}:
\itemize{
\item \code{"list"} (default): a named list, one character vector per element;
\item \code{"unique"}: a single unique character vector across all elements.
}
In \code{"unique"} mode, \code{omic_vars()} and \code{meta_taxa_vars()} also include \code{"omic"} for convenience when stacking data.
}

\section{Missing data semantics}{

\itemize{
\item If no samples/taxa/network are present, the corresponding helper returns \code{character(0)}.
\item If samples exist but \code{meta} is missing/empty, \code{meta_vars()} returns \code{"sample_id"}.
\item If taxa exist but \code{taxa} is missing/empty, \code{taxa_vars()} returns \code{"taxa_id"} (and \code{"comm_id"} if communities exist).
}
}

\seealso{
\code{\link{has_meta}}, \code{\link{has_taxa}}, \code{\link{has_netw}}, \code{\link{has_comm}}
}
\concept{vars-helpers}
