% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilis-base-methods.R
\name{has_miss-methods}
\alias{has_miss-methods}
\alias{has_sample}
\alias{miss_sample}
\alias{has_taxa}
\alias{miss_taxa}
\alias{has_slot}
\alias{miss_slot}
\alias{has_abun}
\alias{miss_abun}
\alias{has_rela}
\alias{miss_rela}
\alias{has_norm}
\alias{miss_norm}
\alias{has_meta}
\alias{miss_meta}
\alias{has_netw}
\alias{miss_netw}
\alias{has_comm}
\alias{miss_comm}
\alias{has_metataxa}
\alias{miss_metataxa}
\title{Presence/absence helpers for \code{omic} / \code{omics}}
\usage{
has_sample(object, .fmt = "list")

miss_sample(object, .fmt = "list")

has_taxa(object, .fmt = "list")

miss_taxa(object, .fmt = "list")

has_slot(object, slot_name, .fmt = "list")

miss_slot(object, slot_name, .fmt = "list")

has_abun(object, .fmt = "list")

miss_abun(object, .fmt = "list")

has_rela(object, .fmt = "list")

miss_rela(object, .fmt = "list")

has_norm(object, .fmt = "list")

miss_norm(object, .fmt = "list")

has_meta(object, .fmt = "list")

miss_meta(object, .fmt = "list")

has_netw(object, .fmt = "list")

miss_netw(object, .fmt = "list")

has_comm(object, .fmt = "list")

miss_comm(object, .fmt = "list")

has_metataxa(object, .fmt = "list")

miss_metataxa(object, .fmt = "list")
}
\arguments{
\item{object}{An object of class \code{omic} or \code{omics}.}

\item{.fmt}{(only for \code{omics}) One of \code{"list"}, \code{"any"}, \code{"all"}.}

\item{slot_name}{(only for \code{has_slot}/\code{miss_slot}) Name of the slot to check.}
}
\value{
For \code{omic}: single logical. For \code{omics}: named logical vector (\code{"list"})
or single logical (\code{"any"}, \code{"all"}).
}
\description{
A unified set of helpers to check whether samples, taxa, or specific slots
are present (\verb{has_*}) or missing (\verb{miss_*}) in \code{omic} and \code{omics} objects.
}
\section{Output format for \code{omics}}{

The \code{.fmt} argument controls the output when \code{object} is an \code{omics}:
\itemize{
\item \code{"list"} (default): named logical vector (one value per element)
\item \code{"any"}: single logical, \code{TRUE} if at least one element matches
\item \code{"all"}: single logical, \code{TRUE} if all elements match
}
The value is validated internally by \code{.match_has_miss_fmt()}.
}

\section{Semantics}{

\tabular{ll}{
\code{has_sample} / \code{miss_sample} \tab use \code{nsample(object) > 0} / \verb{== 0} \cr
\code{has_taxa}   / \code{miss_taxa}   \tab use \code{ntaxa(object) > 0} / \verb{== 0} \cr
\code{has_slot}   / \code{miss_slot}   \tab check that a slot exists and \code{length(slot) > 0} / \verb{== 0} \cr
\code{has_abun}   / \code{miss_abun}   \tab wrappers for \code{"abun"} \cr
\code{has_rela}   / \code{miss_rela}   \tab wrappers for \code{"rela"} \cr
\code{has_norm}   / \code{miss_norm}   \tab wrappers for \code{"norm"} \cr
\code{has_meta}   / \code{miss_meta}   \tab wrappers for \code{"meta"} \cr
\code{has_netw}   / \code{miss_netw}   \tab wrappers for \code{"network"} \cr
\code{has_comm}   / \code{miss_comm}   \tab wrappers for \code{"comm"} \cr
\code{has_metataxa} / \code{miss_metataxa} \tab presence/absence of at least one of \code{"taxa"} or \code{"comm"} \cr
}
}

\section{Edge cases}{

\itemize{
\item For an empty \code{omics} (length 0), \verb{has_*} return \code{FALSE} and \verb{miss_*} return \code{TRUE}.
\item \code{has_slot}/\code{miss_slot} throw an error if the slot does not exist in class \code{omic}.
}
}

\seealso{
\code{\link[=nsample]{nsample()}}, \code{\link[=ntaxa]{ntaxa()}}
}
\concept{omic-introspection}
